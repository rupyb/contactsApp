#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('contacts:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
        return val;
    }

    if (port >= 0) {
    // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('running on ', port);
    debug('Listening on ' + bind);
}
let users = [];

var socket = require('socket.io');
var io = socket(server);

io.on('connection', (socket) => {
    
    socket.on('loggedIn', (data)=> {
        const dataObj = {
            name: data,
            socketId: socket.id
        };
        if (!users.find(c => c.name === data)) {
            users.push(dataObj);
        }

        io.sockets.emit('status',users);
    });

    socket.on('sendchat', (data) => {
        if(data.chatTarget) { 
            io.to(`${data.chatTarget.socketId}`).emit('chat',data);
        } else {
            io.emit('chat', data);
        }
    });

    socket.on('endTyping', () => {
        socket.broadcast.emit('endTyping');
    });

    socket.on('typingToServer', (data) => {
        if(data.chatTarget) {
            io.to(`${data.chatTarget.socketId}`).emit('typing',data.name);
        } else {
            io.emit('typing', data.name);
        }
      
        // socket.broadcast.emit('typing', data);
    });

    socket.on('disconnect', () => {
        users = users.filter(user => user.socketId !== socket.id);
        io.sockets.emit('status',users);
    });
});
